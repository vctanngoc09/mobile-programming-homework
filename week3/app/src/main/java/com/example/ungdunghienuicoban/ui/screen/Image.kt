package com.example.ungdunghienuicoban.ui.screen

import androidx.compose.foundation.Canvas
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.SolidColor
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.graphics.vector.path
import androidx.compose.ui.graphics.vector.rememberVectorPainter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import coil.compose.AsyncImage
import coil.request.ImageRequest
import com.example.ungdunghienuicoban.R
import com.example.ungdunghienuicoban.ui.theme.Blue
import com.example.ungdunghienuicoban.ui.theme.UngdunghienuicobanTheme

@Composable
fun Image(onBack: () -> Unit,){
    UngdunghienuicobanTheme {
        Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
            Surface(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding),
                color = MaterialTheme.colorScheme.background
            ) {
                // t·∫°o scroll state ƒë·ªÉ nh·ªõ v·ªã tr√≠ cu·ªôn
                val scrollState = rememberScrollState()
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(24.dp)
                        .verticalScroll(scrollState), // üëà Th√™m d√≤ng n√†y
                    verticalArrangement = Arrangement.Top
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth(),
                        contentAlignment = Alignment.Center // cƒÉn gi·ªØa cho Text
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically // canh gi·ªØa theo ngang
                        ) {
                            Image(
                                painter = painterResource(R.drawable.back),
                                contentDescription = "Back",
                                modifier = Modifier
                                    .size(8.dp, 15.dp)
                                    .clickable(onClick = onBack),
                                contentScale = ContentScale.Crop
                            )
                            Text(
                                modifier = Modifier.fillMaxWidth(),
                                text = "Images",
                                fontSize = 24.sp,
                                fontWeight = FontWeight.SemiBold,
                                textAlign = TextAlign.Center,
                                color = Blue
                            )
                        }
                    }
                    Spacer(modifier = Modifier.height(30.dp))

                    // ·∫£nh l·∫•y v·ªÅ tr√™n m·∫°ng
                    UrlImageSample()
                    Text(text ="From URL",
                        modifier = Modifier.fillMaxWidth(),
                        textAlign = TextAlign.Center)

                    Spacer(modifier = Modifier.height(30.dp))

                    // ·∫£nh trong app
                    Image(
                        painter = painterResource(id = R.drawable.trg),
                        contentDescription = "Profile picture",
                        modifier = Modifier
                            .fillMaxWidth()
                            .aspectRatio(16f / 9f)
                            .clip(RoundedCornerShape(16.dp)),
                        contentScale = ContentScale.Crop
                    )
                    Text(text = "In App",
                        modifier = Modifier.fillMaxWidth(),
                        textAlign = TextAlign.Center)
                    Spacer(modifier = Modifier.height(30.dp))

                    // t·∫°o ·∫£nh b·∫±ng code
                    // ImageVector: b·∫°n t·ª± t·∫°o m·ªôt ‚Äúh√¨nh vector‚Äù b·∫±ng code (ƒë∆∞·ªùng path, line, curve‚Ä¶), r·ªìi nh√©t v√†o Image. Gi·ªëng nh∆∞ b·∫°n c√≥ m·ªôt file SVG nh∆∞ng vi·∫øt b·∫±ng Kotlin. ∆Øu ƒëi·ªÉm: n√©t kh√¥ng v·ª° khi ph√≥ng to, nh·∫π, ƒë·ªïi m√†u d·ªÖ.
                    // Canvas: b·∫°n kh√¥ng d√πng Image n·ªØa m√† v·∫Ω tr·ª±c ti·∫øp (h√¨nh tr√≤n, ch·ªØ nh·∫≠t, ƒë∆∞·ªùng cong‚Ä¶) l√™n m·ªôt v√πng. D√πng khi c·∫ßn ƒë·ªì h·ªça linh ho·∫°t: badge, rings, progress t√πy bi·∫øn, watermark, skeleton‚Ä¶
                    Row(
                        modifier = Modifier
                            .fillMaxWidth(),
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        VectorLightning()
                        CanvasBadge()
                    }
                    Text(text = "By code",
                        modifier = Modifier.fillMaxWidth(),
                        textAlign = TextAlign.Center)

                }
            }
        }
    }
}

//implementation(platform("io.coil-kt:coil-bom:2.7.0"))
//    implementation("io.coil-kt:coil-compose")
@Composable
fun UrlImageSample() {
    val url =
        "https://tuyensinhhuongnghiep.vn/upload/images/2023/09/08/truong-dai-hoc-giao-thong-van-tai-tphcm.jpg"

    AsyncImage(
        model = ImageRequest.Builder(LocalContext.current)
            .data(url)
            .crossfade(true)
            .build(),
        contentDescription = "ƒêH Giao th√¥ng V·∫≠n t·∫£i TP.HCM",
        contentScale = ContentScale.Crop,
        placeholder = painterResource(R.drawable.img), // t√πy ch·ªçn
        error = painterResource(R.drawable.img),             // t√πy ch·ªçn
        modifier = Modifier
            .fillMaxWidth()
            .aspectRatio(16f / 9f)
            .clip(RoundedCornerShape(16.dp))
    )

}

@Composable
fun VectorLightning(modifier: Modifier = Modifier) {
    // T·∫°o m·ªôt icon "tia s√©t" ƒë∆°n gi·∫£n
    val lightning = remember {
        ImageVector.Builder(
            name = "Lightning",
            defaultWidth = 24.dp,
            defaultHeight = 24.dp,
            viewportWidth = 24f,
            viewportHeight = 24f
        ).apply {
            // Path gi·ªëng nh∆∞ d v·∫Ω trong SVG
            path(fill = SolidColor(Color(0xFFFFC107))) {
                moveTo(13f, 2f)
                lineTo(4f, 14f)
                lineTo(11f, 14f)
                lineTo(10f, 22f)
                lineTo(20f, 9f)
                lineTo(13f, 9f)
                close()
            }
        }.build()
    }

    // Chuy·ªÉn vector th√†nh painter r·ªìi d√πng Image hi·ªÉn th·ªã
    val painter = rememberVectorPainter(image = lightning)

    Image(
        painter = painter,
        contentDescription = "Lightning",
        modifier = modifier.size(64.dp)
    )
}

@Composable
fun CanvasBadge(modifier: Modifier = Modifier) {
    Canvas(
        modifier = modifier
            .size(80.dp)
            .padding(4.dp)
    ) {
        // N·ªÅn tr√≤n
        drawCircle(color = Color(0xFF1976D2))

        // Vi·ªÅn nh·∫´n
        drawCircle(
            color = Color.White,
            radius = size.minDimension / 2.4f,
            style = Stroke(width = 6f)
        )

        // V·∫°ch ch√©o
        drawLine(
            color = Color.White,
            start = Offset(x = size.width * .25f, y = size.height * .25f),
            end   = Offset(x = size.width * .75f, y = size.height * .75f),
            strokeWidth = 8f,
            cap = StrokeCap.Round
        )
    }
}

