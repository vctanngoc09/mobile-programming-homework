package com.example.ungdunghienuicoban.ui.screen

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState

import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource

import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextDecoration

import androidx.compose.ui.text.withStyle
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.ungdunghienuicoban.R
import com.example.ungdunghienuicoban.ui.theme.Blue
import com.example.ungdunghienuicoban.ui.theme.Red
import com.example.ungdunghienuicoban.ui.theme.UngdunghienuicobanTheme
import androidx.compose.ui.text.LinkAnnotation
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.text.withLink
import androidx.compose.ui.unit.em
import com.example.ungdunghienuicoban.ui.theme.Poppins

@Composable
fun Textdetail(onBack: () -> Unit,){
    UngdunghienuicobanTheme {
        Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
            Surface(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding),
                color = MaterialTheme.colorScheme.background
            ) {
                // t·∫°o scroll state ƒë·ªÉ nh·ªõ v·ªã tr√≠ cu·ªôn
                val scrollState = rememberScrollState()
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(24.dp)
                        .verticalScroll(scrollState), // üëà Th√™m d√≤ng n√†y
                    verticalArrangement = Arrangement.Top
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth(),
                        contentAlignment = Alignment.Center // cƒÉn gi·ªØa cho Text
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically // canh gi·ªØa theo ngang
                        ) {
                            Image(
                                painter = painterResource(R.drawable.back),
                                contentDescription = "Back",
                                modifier = Modifier
                                    .size(8.dp, 15.dp)
                                    .clickable(onClick = onBack),
                                contentScale = ContentScale.Crop
                            )
                            Text(
                                modifier = Modifier.fillMaxWidth(),
                                text = "Text Detail",
                                fontSize = 24.sp,
                                fontWeight = FontWeight.SemiBold,
                                textAlign = TextAlign.Center,
                                color = Blue
                            )
                        }
                    }
                    Spacer(modifier = Modifier.height(30.dp))
                    // Text c∆° b·∫£n
                    Text(text = "Test c∆° b·∫£n") // text c∆° b·∫£n

                    // Text c√≥ style tr·ª±c ti·∫øp
                    Text(
                        modifier = Modifier.fillMaxWidth(),
                        text = "Text v·ªõi style",
                        color = Red,
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold,
                        // (.Thin .ExtraLight .Light .Medium .SemiBold .Bold .ExtraBold .Black)
                        fontStyle = FontStyle.Italic,
                        // (.Normal .Italic)
                        textAlign = TextAlign.Left
                        // (.Left .Center .Right .Justify .Start .End)
                    ) // text v·ªõi style

                    // Text v·ªõi TextStyle ri√™ng
                    val myTextStyle = TextStyle(
                        color = Color.DarkGray,
                        fontSize = 18.sp,
                        letterSpacing = 1.sp,
                        lineHeight = 22.sp
                    )

                    Text(text = "Text v·ªõi TextStyle", style = myTextStyle) // TextStyle

                    // Text c√≥ nhi·ªÅu style trong c√πng d√≤ng
                    Text(
                        buildAnnotatedString {
                            withStyle(style = SpanStyle(
                                color = Color.Red,
                                fontWeight = FontWeight.Bold
                            )
                            ) {
                                append("M·ªôt d√≤ng text, ")
                            }
                            withStyle(style = SpanStyle(
                                color = Color.Blue,
                                fontStyle = FontStyle.Italic
                            )
                            ) {
                                append("Nhi·ªÅu ki·ªÉu!")
                            }
                        },
                        modifier = Modifier.fillMaxWidth(),
                        textAlign = TextAlign.Center
                    ) // buildAnnotatedString + withStyle


                    // Text ki·ªÉu link (API m·ªõi thay cho ClickableText)
                    val annotatedText = buildAnnotatedString {
                        append("ƒê·ªçc th√™m v·ªÅ ")

                        withLink(
                            LinkAnnotation.Url("https://developer.android.com/jetpack/compose")
                        ) {
                            withStyle(
                                SpanStyle(
                                    color = Color(0xFF1976D2),
                                    textDecoration = TextDecoration.Underline,
                                    fontWeight = FontWeight.Medium
                                )
                            ) {
                                append("Jetpack Compose")
                            }
                        }
                    }

                    Text(
                        text = annotatedText,
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        textAlign = TextAlign.Center
                    )

                    // X·ª≠ l√Ω khi text qu√° d√†i
                    Text(
                        text = "G·ª≠i th√¥ng b√°o x·ª≠ l√Ω vi ph·∫°m qua h√¨nh ·∫£nh cho g·∫ßn 1.900 tr∆∞·ªùng h·ª£p ch·ªß xe v√† ng∆∞·ªùi vi ph·∫°m, trong ƒë√≥ vi ph·∫°m v·ªÅ t·ªëc ƒë·ªô g·∫ßn 900 tr∆∞∆°ÃÄng h∆°Ã£p; ch·∫°y tr√™n v·ªâa h√® g·∫ßn 400 tr∆∞·ªùng h·ª£p; d·ª´ng xe, ƒë·ªó xe kh√¥ng ƒë√∫ng quy ƒë·ªãnh h∆°n 520 tr∆∞·ªùng h·ª£p‚Ä¶",
                        maxLines = 2,
                        overflow = TextOverflow.Ellipsis // Hi·ªÉn th·ªã d·∫•u "..."
                    )

                    val demo = buildAnnotatedString {
                        // "The " b√¨nh th∆∞·ªùng
                        append("The ")

                        // "~quick~" g·∫°ch ngang
                        withStyle(SpanStyle(textDecoration = TextDecoration.LineThrough)) {
                            append("quick")
                        }

                        append(" ")

                        // "Brown" ƒë·∫≠m + ƒë·ªïi m√†u
                        withStyle(
                            SpanStyle(
                                fontWeight = FontWeight.Bold,
                                color = Color(0xFFB36A00) // n√¢u/cam
                            )
                        ) { append("Brown") }

                        append("\n\n")

                        // "fox jumps" v·ªõi ch·ªØ th∆∞a
                        append("fox ")
                        withStyle(SpanStyle(letterSpacing = 0.2.em)) {
                            append("jumps")
                        }
                        append(" ")

                        // "over" ƒë·∫≠m
                        withStyle(SpanStyle(fontWeight = FontWeight.Bold)) {
                            append("over")
                        }

                        append("\n\n")

                        // "the" g·∫°ch ch√¢n
                        withStyle(SpanStyle(textDecoration = TextDecoration.Underline)) {
                            append("the")
                        }
                        append(" ")

                        // "lazy" nghi√™ng
                        withStyle(SpanStyle(fontStyle = FontStyle.Italic,
                            fontFamily = Poppins,
                            fontWeight = FontWeight.Normal,
                            fontSize = 14.sp)) {
                            append("lazy")
                        }
                        append(" dog.")
                    }

                    Text(
                        text = demo,
                        modifier = Modifier.fillMaxWidth(),
                        style = TextStyle(fontSize = 20.sp, lineHeight = 28.sp)
                    )
                }
            }
        }
    }
}